name: Test

on:
    push:
        paths-ignore:
            - "*.md"
    pull_request:
        paths-ignore:
            - "*.md"

permissions:
    contents: read

concurrency:
    group:
        ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
    cancel-in-progress: true

jobs:
    main:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                python-version: ["3.11"]
                poetry-version: ["1.5.1"]
                os: [ubuntu-latest, windows-latest]
        defaults:
            run:
                shell: bash
        steps:
            - uses: actions/checkout@v3

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Get full Python version
              id: full-python-version
              run:
                  echo version=$(python -c "import sys; print('-'.join(str(version) for
                  version in sys.version_info))") >> $GITHUB_OUTPUT

            - name: Install Poetry
              run: |
                  curl -sSL https://install.python-poetry.org | python - -y

            - name: Update PATH
              if: ${{ matrix.os != 'windows-latest' }}
              run: echo "$HOME/.local/bin" >> $GITHUB_PATH

            - name: Update PATH for Windows
              if: ${{ matrix.os == 'windows-latest' }}
              run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

            - name: Enable long paths for Windows
              if: ${{ matrix.os == 'windows-latest' }}
              run: git config --system core.longpaths true

            - name: Set up cache
              uses: actions/cache@v3
              id: cache
              with:
                  path: .venv
                  key:
                      venv-${{ runner.os }}-${{ steps.full-python-version }}-${{
                      hashFiles('**/poetry.lock') }}

            - name: Ensure cache health
              if: steps.cache.outputs.cache-hit == 'true'
              run: |
                  timeout 10s poetry run pip --version || rm -rf .venv

            - name: Check lock file
              run: poetry lock --check

            - name: Install dependencies
              run: poetry install --with github-actions

            - name: Run mypy
              run: poetry run mypy

            - name: Run tests
              run: poetry run pytest -v
